accepted_names <- match$accepted_name
print(match)
ritalic::lich_occurrences(sp_name = accepted_names[1])
ritalic::lich_occurrences(sp_name = accepted_names[2])
# install and load devtools
library(devtools)
# install and load ritalic
remove.packages('ritalic')
# install and load devtools
library(devtools)
# install and load ritalic
devtools::install_github("Mattciao96/ritalic")
library(ritalic)
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
print(match)
ritalic::lich_occurrences(sp_name = accepted_names[2])
ritalic::lich_occurrences(accepted_names[2])
# install and load devtools
library(devtools)
# install and load ritalic
remove.packages('ritalic')
devtools::install_github("Mattciao96/ritalic@development")
library(ritalic)
ritalic::lich_occurrences(accepted_names[2])
ritalic::lich_occurrences(accepted_names[2])
ritalic::lich_occurrences(accepted_names[2])
ritalic::lich_occurrences(accepted_names[2])
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
print(match)
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
# install and load devtools
library(devtools)
# install and load ritalic
remove.packages('ritalic')
devtools::install_github("Mattciao96/ritalic@development")
library(ritalic)
# install and load devtools
library(devtools)
# install and load ritalic
#devtools::install_github("Mattciao96/ritalic@development")
library(ritalic)
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
accepted_names
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
accepted_names
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
accepted_names
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
# dplyer for easier data wrangling
library(dplyr)
# leaflet for interactive maps
library(leaflet)
# dplyer for easier data wrangling
library(dplyr)
# leaflet for interactive maps
library(leaflet)
# install and load devtools
library(devtools)
# install and load ritalic
#devtools::install_github("Mattciao96/ritalic@development")
library(ritalic)
# install and load devtools
library(devtools)
# install and load ritalic
devtools::install_github("Mattciao96/ritalic@development")
library(ritalic)
# dplyer for easier data wrangling
library(dplyr)
# leaflet for interactive maps
library(leaflet)
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
occurrences <- ritalic::lich_occurrences(accepted_names[2])
head(occurrences)
# in a leaflet map
occurrences %>%
leaflet()
occurrences <- ritalic::lich_occurrences(accepted_names[2])
head(occurrences)
# in a leaflet map
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 11.0, lat = 42.0, zoom = 6)
occurrences <- ritalic::lich_occurrences(accepted_names[2])
head(occurrences)
# in a leaflet map
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 10.0, lat = 42.0, zoom = 5)
occurrences <- ritalic::lich_occurrences(accepted_names[2])
head(occurrences)
# in a leaflet map
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5)
occurrences <- ritalic::lich_occurrences(accepted_names[2])
head(occurrences)
# in a leaflet map
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
addMarkers(~decimalLongitude, ~decimalLatitude, popup = scientificName)
occurrences <- ritalic::lich_occurrences(accepted_names[2])
head(occurrences)
occurrences <- occurrences %>%
mutate(decimalLatitude = as.numeric(decimalLatitude)) %>%
mutate(decimalLongitude = as.numeric(decimalLongitude))
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
addMarkers(~decimalLongitude, ~decimalLatitude, popup = scientificName)
occurrences <- ritalic::lich_occurrences(accepted_names[2])
occurrences <- occurrences %>%
mutate(decimalLatitude = as.numeric(decimalLatitude)) %>%
mutate(decimalLongitude = as.numeric(decimalLongitude))
head(occurrences)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
radius = ~ifelse(is.na(coordinatesUncertaintyInMeters), 1000, coordinatesUncertaintyInMeters),
color = "red",
stroke = FALSE, fillOpacity = 0.5
)
occurrences <- ritalic::lich_occurrences(accepted_names[2])
occurrences <- occurrences %>%
mutate(decimalLatitude = as.numeric(decimalLatitude)) %>%
mutate(decimalLongitude = as.numeric(decimalLongitude)) %>%
mutate(coordinatesUncertaintyInMeters = as.numeric(coordinatesUncertaintyInMeters))
head(occurrences)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
radius = ~ifelse(is.na(coordinatesUncertaintyInMeters), 10, coordinatesUncertaintyInMeters/100),
color = "red",
stroke = FALSE, fillOpacity = 0.5
)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
radius = ~ifelse(is.na(coordinatesUncertaintyInMeters), 1, coordinatesUncertaintyInMeters/1000),
color = "red",
stroke = FALSE, fillOpacity = 0.5
)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
radius = ~ifelse(is.na(coordinatesUncertaintyInMeters), 1, coordinatesUncertaintyInMeters/1000),
color = "red",
stroke = FALSE, fillOpacity = 1
)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
radius = ~ifelse(is.na(coordinatesUncertaintyInMeters), 1, coordinatesUncertaintyInMeters/1000),
color = "red",
stroke = "red", fillOpacity = 1
)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircles(~decimalLongitude, ~decimalLatitude,
radius = ~ifelse(is.na(coordinatesUncertaintyInMeters), 1000, coordinatesUncertaintyInMeters),
color = "red",
stroke = FALSE, fillOpacity = 1
)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarker(~decimalLongitude, ~decimalLatitude,
radius = 20,
color = "red",
stroke = FALSE, fillOpacity = 1
)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
radius = 20),
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
radius = 20,
color = "red",
stroke = FALSE, fillOpacity = 1
)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
radius = 5,
color = "red",
stroke = FALSE, fillOpacity = 1
)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
radius = 2,
color = "red",
stroke = FALSE, fillOpacity = 1
)
occurrences %>%
leaflet() %>%
addTiles() %>%
setView(lng = 9.0, lat = 42.0, zoom = 5) %>%
#addMarkers(~decimalLongitude, ~decimalLatitude, popup = ~scientificName)
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
radius = 3,
color = "red",
stroke = FALSE, fillOpacity = 1
)
checklist <- ritalic::lich_checklist('Italy')
head(checklist)
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Cetraria islandica islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Cetraria islandica islandica', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Cetraria islandica islandico', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Cetraria islandica islandica', 'Lecanora albela' ))
match <- ritalic::lich_match(c('Protoparmelia badio cinereobada', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Protoparmelia badia cinereobada', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Protoparmelia badia cinereobadia', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Protoparmelia badio cinereobadia', 'Lecanora albela' ))
accepted_names <- match$accepted_name
match
match <- ritalic::lich_match(c('Protoparmelia badia cinereobadia', 'Lecanora albela' ))
ecology <-  ritalic::lich_ecology(accepted_names)
ecology
match <- ritalic::lich_match(c('Cetraria islandica', 'Lecanora albela' ))
library(ritalic)
record <- read.table("~/Desktop/units_dottorato/lavori_phd/api/paper-api/presentazione/code/record.csv", header=TRUE, quote="\"")
record7 <- record[13757,]
match7 <- lich_match(record7)
sp_names <- record7
# sp_names must be a vector
if (!is.character(sp_names) && !is.vector(sp_names)) {
stop("sp_string must be a string or a vector")
} else if (is.character(sp_names)) {
sp_names <- c(sp_names)
}
class(sp_names)
# create a vector with only unique species names
unique_sp_names <- unique(sp_names)
i <- 1
success <- FALSE
sp_name <- unique_sp_names[i];
url <- "https://italic.units.it/api/v2/match"
headers <- c('Content-Type' = 'application/json')
body <-
list(
'sp' = sp_name,
'subsp-mark' = subsp_marks,
'var-mark' = var_marks,
'form-mark' = form_marks
)
# Send POST request to API
response <-
POST(url,
body = jsonlite::toJSON(body),
encode = "json",
add_headers(headers))
# Extract response content
data <-  fromJSON(rawToChar(response$content))
View(data)
headers <- c('Content-Type' = 'application/json')
body <-
list(
'sp' = sp_name
)
View(body)
# Send POST request to API
response <-
POST(url,
body = jsonlite::toJSON(body),
encode = "json",
add_headers(headers))
View(response)
# Send POST request to API
response <-
POST(url,
body = jsonlite::toJSON(body),
encode = "json",
add_headers(headers))
# Send POST request to API
response <-
POST(url,
body = jsonlite::toJSON(body),
encode = "json",
add_headers(headers))
record6 <- record[13756,]
record7 <- record[13757,]
record6 == record7
record7
url <- "https://italic.units.it/api/v2/match"
headers <- c('Content-Type' = 'application/json')
body <-
list(
'sp' = sp_name
)
# Send POST request to API
response <-
POST(url,
body = jsonlite::toJSON(body),
encode = "json",
add_headers(headers))
print(jsonlite::toJSON(body))
# Send POST request to API
response <- POST(url,
body = jsonlite::toJSON(body),
encode = "json",
add_headers(headers))
# Print the response for debugging
print(response)
# Check the content type of the response
print(content_type(response))
# Print the content of the response
print(content(response))
sp_names <- record6
# sp_names must be a vector
if (!is.character(sp_names) && !is.vector(sp_names)) {
stop("sp_string must be a string or a vector")
} else if (is.character(sp_names)) {
sp_names <- c(sp_names)
}
class(sp_names)
# replace Na with empty values
sp_names <- ifelse(is.na(sp_names), "", sp_names)
# create a vector with only unique species names
unique_sp_names <- unique(sp_names)
# for each unique name call the match api the result is put in a dataframe
progress_bar <- define_progress_bar(length(unique_sp_names))
i <- 1
success <- FALSE
sp_name <- unique_sp_names[i];
url <- "https://italic.units.it/api/v2/match"
headers <- c('Content-Type' = 'application/json')
body <-
list(
'sp' = sp_name
)
print(jsonlite::toJSON(body))
# Send POST request to API
response <- POST(url,
body = jsonlite::toJSON(body),
encode = "json",
add_headers(headers))
# Print the response for debugging
print(response)
# Check the content type of the response
print(content_type(response))
# Print the content of the response
print(content(response))
library(ritalic)
record6 <- record[13756,]
match6 <- lich_match("Cladonia furcata (Huds.) Schrad. subsp. furcata")
record7 <- record[13757,]
match7 <- lich_match(record7)
cleaned_text <- gsub("\\s|\\p{C}", " ", record7, perl = TRUE)
record6 == cleaned_text
record5 <- record[13755,]
match5 <- lich_match(record5)
record7
record6 == cleaned_text
record6 == record7
record6 == record5
record6 == record7
print(record7, )
record8 <-  "Cladonia furcata (Huds.) Schrad. subsp. furcata"
record6 == record8
cat("Length of record6: ", nchar(record6), "\n")
cat("Length of record7: ", nchar(record7), "\n")
cat("Hex representation of record6: ", charToRaw(record6), "\n")
cat("Hex representation of record7: ", charToRaw(record7), "\n")
cleaned_record6 <- gsub("\\s", "", record6)
cleaned_record7 <- gsub("\\s", "", record7)
# Now compare the cleaned strings
result <- cleaned_record6 == cleaned_record7
# Now compare the cleaned strings
cleaned_record6 == cleaned_record7
match7 <- lich_match(record7)
record7 <- record[13757,]
match7 <- lich_match(record7)
cleaned_text <- gsub("\\s|\\p{C}", " ", record7, perl = TRUE)
record2 <- record[10000:20000,]
match2 <- lich_match(record2)
library(devtools)
devtools::install_github("Mattciao96/ritalic")
library(ritalic)
# activate other utility libraries
library(dplyr)
italic_match('Cetraria islandica')
devtools::install_github("Mattciao96/ritalic", force = TRUE)
library(ritalic)
# install the library
remove.packages('ritalic')
# install the library
remove.packages('ritalic')
library(devtools)
devtools::install_github("Mattciao96/ritalic", force = TRUE)
library(ritalic)
ritalic::
ritalic::lich_checklist()
nomi <- ritalic::lich_checklist()
traits <- italic_traits(nomi)
traits <- italic_traits("topo")
View(traits)
traits <- italic_traits(nomi)
View(traits)
italic_match('Cetraria islandica')
traits2 <- italic_traits('hdhdh', 'Cetraria islandica (L.) Ach. subsp. islandica' ,NA ,NULL, 'Cetraria islandica (L.) Ach. subsp. islandica', TRUE)
traits2 <- italic_traits(c('hdhdh', 'Cetraria islandica (L.) Ach. subsp. islandica' ,NA ,NULL, 'Cetraria islandica (L.) Ach. subsp. islandica', TRUE))
View(traits2)
dist <- 'Cetraria islandica (L.) Ach. subsp. islandica'
dist <- ritalic::lich_distribution('Cetraria islandica (L.) Ach. subsp. islandica')
View(dist)
View(dist)
View(traits)
machi <- ritalic::italic_match(nomi)
View(machi)
machi <- ritalic::italic_match(nomi)
machi <- ritalic::italic_match(nomi[1:100])
library(readxl)
POTENZA_copy <- read_excel("POTENZA copy.xls")
View(POTENZA_copy)
write.csv(POTENZA_copy, 'dataset-test.csv', row.names = F)
dataset.test <- read.csv("~/Desktop/units_dottorato/lavori_phd/api/paper-api/presentazione/code/dataset-test.csv")
View(dataset.test)
dataset <- read.csv("dataset-test.csv")
View(dataset)
library(devtools)
# devtools::install_github("Mattciao96/ritalic", force = TRUE)
library(ritalic)
devtools::install_github("Mattciao96/ritalic", force = TRUE)
library(ritalic)
# activate other utility libraries
library(dplyr)
dataset <- read.csv("dataset-test.csv")
